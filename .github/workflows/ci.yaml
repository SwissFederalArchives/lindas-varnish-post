name: Build and push Docker image

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        uses: zazuko/action-docker-meta@main
        id: docker_meta
        with:
          images: ghcr.io/zazuko/varnish-post

      - name: Build and push Docker images
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Docker meta for test image
        uses: zazuko/action-docker-meta@main
        id: docker_meta_test
        with:
          images: ghcr.io/zazuko/varnish-test-backend

      - name: Build and push Docker images for the backend used for tests
        id: docker_build_test
        uses: docker/build-push-action@v2
        with:
          context: ./test/app/
          file: ./test/app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta_test.outputs.tags }}
          labels: ${{ steps.docker_meta_test.outputs.labels }}

  tests:
    runs-on: ubuntu-latest

    services:
      backend:
        image: ghcr.io/zazuko/varnish-test-backend:latest
        ports:
          - 8080:8080

      varnish:
        image: ghcr.io/zazuko/varnish-post:latest
        ports:
          - 8081:80
        env:
          BACKEND_HOST: backend
          BACKEND_PORT: 8080
          CACHE_TTL: 2s

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run tests
        run: cd test && ./run.sh
